# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache apt packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ matrix.os }}-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          apt-${{ matrix.os }}-
  
    - name: Install build tools & System dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential make
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
        
    - name: Setup build tools (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Cache Windows packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: C:\ProgramData\chocolatey\lib
        key: choco-${{ matrix.os }}-pkgconfiglite-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          choco-${{ matrix.os }}-pkgconfiglite-
          choco-${{ matrix.os }}-

    - name: Install pkg-config (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install pkgconfiglite -y

     # Setup ccache for faster compilation (Linux only)
    - name: Setup ccache
      if: matrix.os == 'ubuntu-latest'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.h', '**/*.hpp') }}
        max-size: 2G

      #Download project dependencies through vcpkg
    - name: Setup vcpkg manager
      uses: lukka/run-vcpkg@v11
      with:
         vcpkgDirectory: '${{ github.workspace }}/vcpkg'
         vcpkgGitCommitId: '4002e3abc6d3e468c73d2d9777a7dd96af5dc224'
      env:
        VCPKG_FORCE_SYSTEM_BINARIES: 1

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{github.workspace}}/vcpkg/buildtrees
          ${{github.workspace}}/vcpkg/packages
          ${{github.workspace}}/vcpkg/downloads
          ${{github.workspace}}/vcpkg/installed
        key: vcpkg-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '.github/workflows/**') }}
        restore-keys: |
          vcpkg-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
          vcpkg-${{ matrix.os }}-${{ matrix.c_compiler }}-
          vcpkg-${{ matrix.os }}-
          vcpkg-

      # Cache CMake build output for faster incremental builds
    - name: Cache CMake build output
      uses: actions/cache@v4
      with:
        path: ${{ steps.strings.outputs.build-output-dir }}
        key: cmake-build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.h', '**/*.hpp', '**/vcpkg.json') }}
        restore-keys: |
          cmake-build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
          cmake-build-${{ matrix.os }}-${{ matrix.c_compiler }}-
          cmake-build-${{ matrix.os }}-

    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}/VulkanRenderer

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}/VulkanRenderer
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    # Display cache statistics for debugging
    - name: Display ccache statistics
      run: ccache -s
